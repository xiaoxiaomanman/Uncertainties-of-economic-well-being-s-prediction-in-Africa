return(RF_SC_list)
}
#---------------------------- PCA -----------------------------
# 95%置信区间
alpha = 0.95
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
RF_PCA_0.95_ms <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_RF/"))
RF_PCA_0.95_nl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_RF/"))
RF_PCA_0.95_msnl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_RF/"))
# 90%置信区间
alpha = 0.90
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
RF_PCA_0.90_ms <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_RF/"))
RF_PCA_0.90_nl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_RF/"))
RF_PCA_0.90_msnl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_RF/"))
# 80%置信区间
alpha = 0.80
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
RF_PCA_0.80_ms <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_RF/"))
RF_PCA_0.80_nl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_RF/"))
RF_PCA_0.80_msnl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_RF/"))
library(ranger)
library(MASS)
library(Matrix)
library(ggplot2)
library(dplyr)
library(reshape2)
library(glmnet)
library(scales)
library(rfinterval)
library(reticulate)
library(xgboost)
group_names <- c('angola', 'benin', 'burkina_faso', 'cameroon', 'cote_d_ivoire',
'democratic_republic_of_congo', 'ethiopia', 'ghana', 'guinea', 'kenya',
'lesotho', 'malawi', 'mali', 'mozambique', 'nigeria', 'rwanda', 'senegal',
'sierra_leone', 'tanzania', 'togo', 'uganda', 'zambia', 'zimbabwe')
DHS <- read.csv("/africa_poverty_clean-main/data/dhs_clusters_19047.csv", header = TRUE)
labels <- DHS[,"wealthpooled"]
group_labels <- DHS[,'country_labels']+1
split_train_sc<-function(data){
set.seed(123)
ind <- sort(sample(nrow(data),floor(nrow(data)*0.5)))
data_1 <- data[ind,]  # 训练数据1
data_2 <- data[-ind,]  # 训练数据2
return(list(data_1 = data_1,data_2 = data_2))
}
CWC<-function(alpha,pinaw,picp,factor){
gamma<-vector(mode="numeric",length=length(picp))
for(i in 1:(length(gamma))){
if(picp<alpha)
gamma[i]=1
else
gamma[i]=0
}
return(round(pinaw*(1+gamma*exp(-factor*(picp-alpha))),3))
}
RF_SC <- function(alpha, labels, group_names, para_path, feature_path, output_path){
# 各国家区间指标记录
interval_benchmarks <- matrix(0,length(group_names),3)
rownames(interval_benchmarks) <- group_names
colnames(interval_benchmarks) <- c('PICP','PINAW','CWC')
# 所有区间指标记录
all_interval_benchmarks <- matrix(0,1,3)
colnames(all_interval_benchmarks) <- c('PICP','PINAW','CWC')
# 所有区间预测
all_interval_preds <- matrix(0,0,3)
colnames(all_interval_preds) <- c('left','test_pred','right')
# Winkler_score
Winkler_score <- matrix(0,length(labels),1)
for (f in group_names){
cat('reading',f,'...')
filePath <- paste0(feature_path, f,'.csv')
data <- read.csv(filePath, header = FALSE)
features <- as.matrix(data)
cat('Group:', f, '\n')
i <- which(group_names == f)
all_country_MSE_hyperparams <- read.csv(paste0(para_path, 'RF_all_country_MSE_hyperparams.csv'), header = TRUE)
test_indices <- which(group_labels == i)
train_indices <- which(group_labels != i)
X <- features[train_indices,]
y <- labels[train_indices]
test_X <- features[test_indices,]
test_y <- labels[test_indices]
train_data <- data.frame(X = X, y = y)
split_data <- split_train_sc(train_data)
train_data_1 <- data.frame(split_data$data_1)
train_data_2 <- data.frame(split_data$data_2)
test_data <- data.frame(X = test_X, y = test_y)
ufit <- ranger(
formula = train_data_1[,ncol(train_data_1)] ~ .,
data = train_data_1,
num.trees = all_country_MSE_hyperparams[i,]$num.trees,
mtry = all_country_MSE_hyperparams[i,]$mtry,
max.depth = all_country_MSE_hyperparams[i,]$max.depth,
importance = 'impurity',
seed = 123
)
# 使用子集 I2(train_data_2) 与训练得到的底层模型获得预测误差
upre<-predict(ufit,train_data_2)
error<-abs(train_data_2[,ncol(train_data_2)]-upre$predictions)
#区间水平设置
k <- floor(alpha*(length(error)+1))
d <- sort(error)[k]
#测试数据预测
test_pre<-predict(ufit,test_data)$predictions
left<-test_pre-d
right<-test_pre+d
# 区间预测指标的计算
# PICP
interval_benchmarks[i,1] <- round(mean(left < test_y & right > test_y),3)
# PINAW
interval_benchmarks[i,2] <- round(mean(right-left)/(max(test_y)-min(test_y)),3)
# CWC
interval_benchmarks[i,3] <- round(CWC(alpha,interval_benchmarks[i,2],interval_benchmarks[i,1],25),3)
# 上下分位数表
interval_preds <- data.frame(left,test_pre,right)
all_interval_preds <- rbind(all_interval_preds, interval_preds)
}
# 保存 SC 各国家区间预测的指标
dir.create(output_path)
dir.create(paste0(output_path, alpha*100,"/"))
write.csv(interval_benchmarks, paste0(output_path, alpha*100,"/", 'interval_benchmarks.csv'))
# 保存 SC 整体区间预测的指标
# PICP
all_interval_benchmarks[,1] <- round(mean(all_interval_preds$left < labels & all_interval_preds$right > labels),3)
# PINAW
all_interval_benchmarks[,2] <- round(mean(all_interval_preds$right-all_interval_preds$left)/(max(labels)-min(labels)),3)
# CWC
all_interval_benchmarks[,3] <- round(CWC(alpha,all_interval_benchmarks[,2],all_interval_benchmarks[,1],25),3)
write.csv(all_interval_benchmarks, paste0(output_path, alpha*100,"/", 'all_interval_benchmarks.csv'),row.names = FALSE )
# 保存 SC 预测区间
write.csv(all_interval_preds, paste0(output_path, alpha*100,"/", 'interval_preds.csv'), row.names = FALSE)
# 保存 Winkler_score
for (i in 1:length(labels)){
w <- all_interval_preds[i,'right']-all_interval_preds[i,'left']
if (labels[i] < all_interval_preds[i,'left']){
Winkler_score[i] <- w+2*(all_interval_preds[i,'left']-labels[i])/(1-alpha)
} else if (labels[i] > all_interval_preds[i,'right']){
Winkler_score[i] <- w+2*(labels[i]-all_interval_preds[i,'right'])/(1-alpha)
} else{
Winkler_score[i] <- w
}
}
Winkler_Score <- mean(Winkler_score)
write.csv(Winkler_Score, paste0(output_path, alpha*100,"/", 'Winkler_Score.csv'), row.names = FALSE)
RF_SC_list<- list(all_interval_benchmarks = all_interval_benchmarks,
interval_benchmarks = interval_benchmarks,
all_interval_preds = all_interval_preds,
Winkler_Score = Winkler_Score)
return(RF_SC_list)
}
# 95%置信区间
alpha = 0.95
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
RF_PCA_0.95_ms <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_RF/"))
RF_PCA_0.95_nl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_RF/"))
RF_PCA_0.95_msnl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_RF/"))
# 90%置信区间
alpha = 0.90
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
RF_PCA_0.90_ms <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_RF/"))
RF_PCA_0.90_nl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_RF/"))
RF_PCA_0.90_msnl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_RF/"))
# 80%置信区间
alpha = 0.80
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
RF_PCA_0.80_ms <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_RF/"))
RF_PCA_0.80_nl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_RF/"))
RF_PCA_0.80_msnl <- RF_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/RF_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_RF/"))
Ridge_SC <- function(alpha, labels, group_names, para_path, feature_path, output_path){
# 各国家区间指标记录
interval_benchmarks <- matrix(0,length(group_names),3)
rownames(interval_benchmarks) <- group_names
colnames(interval_benchmarks) <- c('PICP','PINAW','CWC')
# 所有区间指标记录
all_interval_benchmarks <- matrix(0,1,3)
colnames(all_interval_benchmarks) <- c('PICP','PINAW','CWC')
# 所有区间预测
all_interval_preds <- matrix(0,0,3)
colnames(all_interval_preds) <- c('left','test_pred','right')
# Winkler_score
Winkler_score <- matrix(0,length(labels),1)
for (f in group_names){
cat('reading',f,'...')
filePath <- paste0(feature_path, f,'.csv')
data <- read.csv(filePath, header = FALSE)
features <- as.matrix(data)
cat('Group:', f, '\n')
i <- which(group_names == f)
all_country_MSE_hyperparams <- read.csv(paste0(para_path, 'best_alphas.csv'), header = FALSE)
colnames(all_country_MSE_hyperparams) <- c('country','best_alpha')
test_indices <- which(group_labels == i)
train_indices <- which(group_labels != i)
X <- features[train_indices,]
y <- labels[train_indices]
test_X <- features[test_indices,]
test_y <- labels[test_indices]
train_data <- data.frame(X = X, y = y)
split_data <- split_train_sc(train_data)
train_data_1 <- data.frame(split_data$data_1)
train_data_2 <- data.frame(split_data$data_2)
test_data <- data.frame(X = test_X, y = test_y)
source_python("E:/africa_poverty_clean-main/utils/py_ridge.py")
set.seed(123)
ufit <- Ridge_train(X_train = train_data_1[,1:ncol(train_data_1)-1],
y_train = train_data_1[,ncol(train_data_1)],
best_alpha = all_country_MSE_hyperparams[which(all_country_MSE_hyperparams$country==f),]$best_alpha)
# 使用子集 I2(train_data_2) 与训练得到的底层模型获得预测误差
upre<-Ridge_pred(ufit,as.matrix(train_data_2[,1:ncol(train_data_2)-1]))
error<-train_data_2[,ncol(train_data_2)]-upre
#区间水平设置
k <- floor(alpha*(length(error)+1))
d <- sort(error)[k]
#测试数据预测
test_pre<-Ridge_pred(ufit,test_X)
left<-test_pre-d
right<-test_pre+d
# 区间预测指标的计算
# PICP
interval_benchmarks[i,1] <- round(mean(left < test_y & right > test_y),3)
# PINAW
interval_benchmarks[i,2] <- round(mean(right-left)/(max(test_y)-min(test_y)),3)
# CWC
interval_benchmarks[i,3] <- round(CWC(alpha,interval_benchmarks[i,2],interval_benchmarks[i,1],25),3)
# 上下分位数表
interval_preds <- data.frame(left,test_pre,right)
all_interval_preds <- rbind(all_interval_preds, interval_preds)
}
# 保存SC各国家区间预测的指标
dir.create(output_path)
dir.create(paste0(output_path, alpha*100,"/"))
write.csv(interval_benchmarks, paste0(output_path, alpha*100,"/", 'interval_benchmarks.csv'))
colnames(all_interval_preds) <- c('left','test_pre','right')
# 保存 SC 整体区间预测的指标
# PICP
all_interval_benchmarks[,1] <- round(mean(all_interval_preds$left < labels & all_interval_preds$right > labels),3)
# PINAW
all_interval_benchmarks[,2] <- round(mean(all_interval_preds$right-all_interval_preds$left)/(max(labels)-min(labels)),3)
# CWC
all_interval_benchmarks[,3] <- round(CWC(alpha,all_interval_benchmarks[,2],all_interval_benchmarks[,1],25),3)
write.csv(all_interval_benchmarks, paste0(output_path, alpha*100,"/", 'all_interval_benchmarks.csv'),row.names = FALSE )
# 保存 SC 预测区间
write.csv(all_interval_preds, paste0(output_path, alpha*100,"/", 'interval_preds.csv'), row.names = FALSE)
# 保存 Winkler_score
for (i in 1:length(labels)){
w <- all_interval_preds[i,'right']-all_interval_preds[i,'left']
if (labels[i] < all_interval_preds[i,'left']){
Winkler_score[i] <- w+2*(all_interval_preds[i,'left']-labels[i])/(1-alpha)
} else if (labels[i] > all_interval_preds[i,'right']){
Winkler_score[i] <- w+2*(labels[i]-all_interval_preds[i,'right'])/(1-alpha)
} else{
Winkler_score[i] <- w
}
}
Winkler_Score <- mean(Winkler_score)
write.csv(Winkler_Score, paste0(output_path, alpha*100,"/", 'Winkler_Score.csv'), row.names = FALSE)
Ridge_SC_list<- list(all_interval_benchmarks = all_interval_benchmarks,
interval_benchmarks = interval_benchmarks,
all_interval_preds = all_interval_preds,
Winkler_Score = Winkler_Score)
return(Ridge_SC_list)
}
#---------------------------- PCA -----------------------------
# 95%置信区间
alpha = 0.95
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
Ridge_PCA_0.95_ms <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_Ridge/"))
Ridge_PCA_0.95_nl <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_Ridge/"))
Ridge_PCA_0.95_msnl <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_Ridge/"))
# 90%置信区间
alpha = 0.90
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
Ridge_PCA_0.90_ms <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_Ridge/"))
Ridge_PCA_0.90_nl <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_Ridge/"))
Ridge_PCA_0.90_msnl <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_Ridge/"))
# 80%置信区间
alpha = 0.80
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
Ridge_PCA_0.80_ms <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_Ridge/"))
Ridge_PCA_0.80_nl <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_Ridge/"))
Ridge_PCA_0.80_msnl <- Ridge_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/ridge_logo_pca099/"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_Ridge/"))
XGBoost_SC <- function(alpha, labels, group_names, para_path, feature_path, output_path){
# 各国家区间指标记录
interval_benchmarks <- matrix(0,length(group_names),3)
rownames(interval_benchmarks) <- group_names
colnames(interval_benchmarks) <- c('PICP','PINAW','CWC')
# 所有区间指标记录
all_interval_benchmarks <- matrix(0,1,3)
colnames(all_interval_benchmarks) <- c('PICP','PINAW','CWC')
# 所有区间预测
all_interval_preds <- matrix(0,0,3)
colnames(all_interval_preds) <- c('left','test_pred','right')
# Winkler_score
Winkler_score <- matrix(0,length(labels),1)
for (f in group_names){
cat('reading',f,'...')
filePath <- paste0(feature_path, f,'.csv')
data <- read.csv(filePath, header = FALSE)
features <- as.matrix(data)
cat('Group:', f, '\n')
i <- which(group_names == f)
#all_country_MSE_hyperparams <- read.csv(paste0(para_path, 'XGBoost_all_country_MSE_hyperparams_pca099.csv'), header = TRUE)
all_country_MSE_hyperparams <- read.csv(para_path, header = TRUE)
test_indices <- which(group_labels == i)
train_indices <- which(group_labels != i)
X <- as.matrix(features[train_indices,])
y <- labels[train_indices]
test_X <- as.matrix(features[test_indices,])
test_y <- labels[test_indices]
train_data <- data.frame(X = X, y = y)
split_data <- split_train_sc(train_data)
train_data_1 <- data.frame(split_data$data_1)
train_data_2 <- data.frame(split_data$data_2)
test_data <- data.frame(X = test_X, y = test_y)
X_train_data_1 <- as.matrix(train_data_1[,1:ncol(train_data_1)-1])
y_train_data_1 <- train_data_1[,ncol(train_data_1)]
X_train_data_2 <- as.matrix(train_data_2[,1:ncol(train_data_2)-1])
y_train_data_2 <- train_data_2[,ncol(train_data_2)]
dtrain_data_1 <- xgb.DMatrix(data = X_train_data_1, label = y_train_data_1)
dtrain_data_2 <- xgb.DMatrix(data = X_train_data_2, label = y_train_data_2)
if (ncol(X) !=1){
colnames(test_X) <- paste("X", colnames(test_X), sep = ".")
}
dtest <- xgb.DMatrix(data = test_X, label = test_y)
set.seed(123)
ufit <- xgboost(data = dtrain_data_1,
eta = all_country_MSE_hyperparams$eta[i],
max_depth = all_country_MSE_hyperparams$max_depth[i],
subsample = all_country_MSE_hyperparams$subsample[i],
nrounds = all_country_MSE_hyperparams$nrounds[i])
# 使用子集 I2(train_data_2) 与训练得到的底层模型获得预测误差
upre <- predict(ufit, newdata = dtrain_data_2)
error<-train_data_2[,ncol(train_data_2)]-upre
#区间水平设置
k <- floor(alpha*(length(error)+1))
d <- sort(error)[k]
#测试数据预测
test_pre<-predict(ufit,newdata = dtest)
left<-test_pre-d
right<-test_pre+d
# 区间预测指标的计算
# PICP
interval_benchmarks[i,1] <- round(mean(left < test_y & right > test_y),3)
# PINAW
interval_benchmarks[i,2] <- round(mean(right-left)/(max(test_y)-min(test_y)),3)
# CWC
interval_benchmarks[i,3] <- round(CWC(alpha,interval_benchmarks[i,2],interval_benchmarks[i,1],25),3)
# 上下分位数表
interval_preds <- data.frame(left,test_pre,right)
all_interval_preds <- rbind(all_interval_preds, interval_preds)
}
# 保存 SC 各国家区间预测的指标
dir.create(output_path)
dir.create(paste0(output_path, alpha*100,"/"))
write.csv(interval_benchmarks, paste0(output_path, alpha*100,"/", 'interval_benchmarks.csv'))
# 保存 SC 整体区间预测的指标
# PICP
all_interval_benchmarks[,1] <- round(mean(all_interval_preds$left < labels & all_interval_preds$right > labels),3)
# PINAW
all_interval_benchmarks[,2] <- round(mean(all_interval_preds$right-all_interval_preds$left)/(max(labels)-min(labels)),3)
# CWC
all_interval_benchmarks[,3] <- round(CWC(alpha,all_interval_benchmarks[,2],all_interval_benchmarks[,1],25),3)
write.csv(all_interval_benchmarks, paste0(output_path, alpha*100,"/", 'all_interval_benchmarks.csv'),row.names = FALSE )
# 保存 SC 预测区间
write.csv(all_interval_preds, paste0(output_path, alpha*100,"/", 'interval_preds.csv'), row.names = FALSE)
# 保存 Winkler_score
for (i in 1:length(labels)){
w <- all_interval_preds[i,'right']-all_interval_preds[i,'left']
if (labels[i] < all_interval_preds[i,'left']){
Winkler_score[i] <- w+2*(all_interval_preds[i,'left']-labels[i])/(1-alpha)
} else if (labels[i] > all_interval_preds[i,'right']){
Winkler_score[i] <- w+2*(labels[i]-all_interval_preds[i,'right'])/(1-alpha)
} else{
Winkler_score[i] <- w
}
}
Winkler_Score <- mean(Winkler_score)
write.csv(Winkler_Score, paste0(output_path, alpha*100,"/", 'Winkler_Score.csv'), row.names = FALSE)
XGBoost_SC<- list(all_interval_benchmarks = all_interval_benchmarks,
interval_benchmarks = interval_benchmarks,
all_interval_preds = all_interval_preds,
Winkler_Score)
return(XGBoost_SC)
}
#---------------------------- PCA -----------------------------
# 95%置信区间
alpha = 0.95
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
XGBoost_PCA_0.95_ms <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_XGBoost/"))
XGBoost_PCA_0.95_nl <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_XGBoost/"))
XGBoost_PCA_0.95_msnl <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_XGBoost/"))
# 90%置信区间
alpha = 0.90
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
XGBoost_PCA_0.90_ms <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_XGBoost/"))
XGBoost_PCA_0.90_nl <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_XGBoost/"))
XGBoost_PCA_0.90_msnl <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_XGBoost/"))
# 80%置信区间
alpha = 0.80
PCA_path <- "/africa_poverty_clean-main/outputs/dhs_ooc/PCA_099/"
XGBoost_PCA_0.80_ms <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_ms_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_ms_pca099/"),
output_path = paste0(PCA_path, "resnet_ms_pca099/SC_XGBoost/"))
XGBoost_PCA_0.80_nl <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_nl_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_nl_pca099/"),
output_path = paste0(PCA_path, "resnet_nl_pca099/SC_XGBoost/"))
XGBoost_PCA_0.80_msnl <- XGBoost_SC(alpha = alpha, labels = labels, group_names = group_names,
para_path = paste0(PCA_path, "resnet_msnl_pca099/XGBoost_logo_pca099/", "XGBoost_all_country_MSE_hyperparams_pca099.csv"),
feature_path = paste0(PCA_path, "features_msnl_pca099/"),
output_path = paste0(PCA_path, "resnet_msnl_pca099/SC_XGBoost/"))
save.image("E:/africa_poverty_clean-main/models/区间预测/SC.RData")
